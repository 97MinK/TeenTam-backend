from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from django.utils import timezone
from django.core.paginator import Paginator
from .models import Boards, Likes
from account.models import User
from .serializer import *
from datetime import datetime, timedelta
from django.db.models import Q
# 카테고리별 게시글 목록


class BoardsListViewSet(APIView):

    def get(self, request, boards_category):

        page = int(request.GET.get('page'))
        offset = int(request.GET.get('offset'))
        order = request.GET.get('order')
        cursor = (page-1)*offset

        # 게시글 모든 카테고리 조회
        if boards_category == 0:
            sql = ('SELECT * FROM boards_boards AS boards WHERE boards.delete_date IS NULL ORDER BY '
                   + order + ' DESC LIMIT ' + str(offset) + ' OFFSET ' + str(cursor))
            boards_num = Boards.objects.filter(
                delete_date=None).count()  # 전체 게시글 갯수
        # 게시글 특정 카테고리 조회
        else:
            sql = ('SELECT * FROM boards_boards AS boards WHERE boards.boards_category_id = ' +
                   str(boards_category) + ' AND boards.delete_date IS NULL ORDER BY ' + order + ' DESC LIMIT ' +
                   str(offset) + ' OFFSET ' + str(cursor))
            boards_num = Boards.objects.filter(
                boards_category=boards_category, delete_date=None).count()  # 카테고리 내 전체 게시글 갯수

        boards = Boards.objects.raw(sql)

        serializer = BoardsListSerializer(boards, many=True)

        data = serializer.data
        response = Response({
            "message": "GET boards list success",
            "data": data,
            "boards_num": boards_num,
        })

        return response


# 게시판 카테고리 생성
class CreateBoardCategoryViewSet(APIView):

    def post(self, request):

        serializer = CreateBoardCategorySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()

        response = Response({
            "message": "create board category successfully"
        }, status=status.HTTP_201_CREATED)
        return response


# 게시글 생성
class CreateBoardViewSet(APIView):

    def post(self, request):

        serializer = CreateBoardsSerializer(data=request.data)
        if serializer.is_valid(raise_exception=True):

            # 유저 작성 댓글 갯수 갱신
            user_id = request.data['boards_writer']
            user = User.objects.get(id=user_id)
            user.boards_written += 1
            user.save()

            serializer.save()

        response = Response({
            "message": "create board successfully",
            "boards_id": serializer.data['id'],
        }, status=status.HTTP_201_CREATED)

        return response


# 게시글 삭제
class DeleteBoardsViewSet(APIView):

    def delete(self, request, boards_id):

        user_id = int(request.data["user_id"])
        board = Boards.objects.get(id=boards_id)

        # 게시글 삭제시 작성자 확인
        if board.boards_writer.id != user_id:
            response = Response({
                "message": "bad access (user not allowed)"
            }, status=status.HTTP_403_FORBIDDEN)
            return response

        board.delete_date = timezone.now()
        board.save()
        response = Response({
            "message": "delete success",
        }, status=status.HTTP_200_OK)

        return response


# 게시글 상세보기
class BoardDetailViewSet(APIView):

    def get(self, request, boards_category, boards_id):

        board = Boards.objects.filter(id=boards_id).first()

        # 없는 게시글 요청 시
        if board is None:
            response = Response({
                "message": "wrong board id"
            }, status=status.HTTP_404_NOT_FOUND)
            return response

        # 삭제된 게시글 요청 시
        if board.delete_date is not None:
            response = Response({
                "message": "deleted board id"
            }, status=status.HTTP_204_NO_CONTENT)
            return response

        serializer = BoardDetailSerializer(board)
        data = serializer.data

        """
        조회수 기능 - 토큰 사용
        매일 00시에 만료되는 토큰에 클라이언트가 조회한 boards_id 저장
        만약, 조회한 게시글 id가 이미 쿠키에 존재할 경우 hit 증가 X
        """
        # 토큰 만료시간 설정, 매일 00시에 만료
        expire_date, now = datetime.now(), datetime.now()
        expire_date += timedelta(days=1)
        expire_date = expire_date.replace(
            hour=0, minute=0, second=0, microsecond=0)
        expire_date -= now
        max_age = expire_date.total_seconds()  # 토큰 만료시간

        cookie_value = request.COOKIES.get('hitboard', '_')

        if f'_{board.id}_' not in cookie_value:
            cookie_value += f'{board.id}_'
            board.hit += 1
            board.save()

        response = Response({
            "data": data
        }, status=status.HTTP_200_OK)
        response.set_cookie('hitboard', value=cookie_value,
                            max_age=max_age, httponly=True, samesite=None)

        return response


# 게시글 수정
class ModifyBoardsViewSet(APIView):

    def post(self, request, boards_id):

        # 작성자 Validation
        board = Boards.objects.filter(id=boards_id).first()

        if board.boards_writer.id != int(request.data['user_id']):
            response = Response({
                "message": "bad access (user not allowed)",
            }, status=status.HTTP_403_FORBIDDEN)
            return response

        serializer = ModifyBoardsSerializer(board, data=request.data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()

        response = Response({
            "message": "modify board success",
            "boards_id": serializer.data['id']
        })

        return response


# 키워드 검색
class SearchBoardsViewSet(APIView):

    def get(self, request):

        page = int(request.GET.get('page')) # 페이지 넘버
        offset = int(request.GET.get('offset')) # offset 한 페이지에 보여주는 목록 갯수
        order = request.GET.get('order') # 정렬 기능
        keyword = request.GET.get('keyword') # 검색 키워드
        category_name = request.GET.get('category_name') # 카테고리 명 
        writer_name = request.GET.get('writer_name')
        # print(category_name)
        q = Q()
        # 카테고리 내 검색일 경우
            
        # 글쓴이 검색일 경우
        if writer_name:
            boards_writer = User.objects.filter(username=writer_name).first()
            if boards_writer:
                q &= Q(boards_writer=boards_writer.id)
                if category_name:
                    category = BoardCategories.objects.get(name=category_name)
                    q &= Q(boards_category = category.id)
                    q &= Q(is_anon = False)
                print(q)
                boards = Boards.objects.filter(q).distinct().order_by(order)
            else:
                boards  = []
            
        # 게시글 검색일 경우   
        else:
            q |= Q(title__icontains=keyword)
            q |= Q(content__icontains=keyword)
            
            if category_name:
                category = BoardCategories.objects.filter(name=category_name).first()
                q &= Q(boards_category = category.id)
                
            boards = Boards.objects.filter(q).distinct().order_by(order)
                
        paginator = Paginator(boards, offset)
        boards_list = paginator.page(page)
        serializers = BoardsListSerializer(boards_list, many=True)
        data = serializers.data

        response = Response({
            "data": data,
            "boards_num": len(boards), # 전체 검색 결과 갯수
            "message": "search board list success",
        })

        return response


# 댓글 생성
class CreateCommentsViewSet(APIView):

    def post(self, request):

        serializer = CreateCommentsSerializer(data=request.data)
        if serializer.is_valid():

            # 유저 작성 댓글 갯수 갱신
            user = User.objects.get(id=request.data['comments_writer'])
            user.comments_written += 1
            user.save()

            serializer.save()

        commentsList = Comments.objects.filter(
            comments_board_id=request.data['comments_board'])
        commentSerializer = CommentsSerializer(commentsList, many=True)

        response = Response({
            "data": commentSerializer.data,
            "message": "create comment success"
        }, status=status.HTTP_201_CREATED)

        return response


# 댓글 삭제
class DeleteCommentsViewSet(APIView):

    def delete(self, request, comments_id):

        comment = Comments.objects.get(id=comments_id)
        # 댓글 삭제시 작성자 확인
        if comment.comments_writer.id != int(request.data["user_id"]):
            response = Response({
                "message": "bad access (user not allowed)",
            }, status=status.HTTP_403_FORBIDDEN)
            return response

        comment.delete_date = timezone.now()
        comment.save()
        response = Response({
            "message": "delete comment success",
        }, status=status.HTTP_200_OK)

        return response


# 댓글 수정
class ModifyCommentsViewSet(APIView):

    def post(self, request, comments_id):

        # 작성자 Validation
        comment = Comments.objects.filter(id=comments_id).first()

        # 작성자와 수정자 불일치
        if comment.comments_writer.id != int(request.data['user_id']):
            response = Response({
                "message": "bad access (user not allowed)",
            }, status=status.HTTP_403_FORBIDDEN)
            return response

        serializer = ModifyCommentsSerializer(comment, data=request.data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()

        response = Response({
            "message": "modify board success",
            "boards_id": comment.comments_board_id,
        })

        return response


########################## 부가기능 ############################

# 게시글 좋아요 기능
class BoardsLikeViewSet(APIView):

    def post(self, request):

        boards_id = request.data["likes_board"]
        user_id = request.data["likes_user"]
        # 이미 좋아요 한 사용자 확인
        if Likes.objects.filter(likes_board=boards_id, likes_user=user_id).exists():
            response = Response({
                "message": "user already like this board"
            }, status=status.HTTP_200_OK)
            return response

        board = Boards.objects.get(id=boards_id)
        board.like += 1
        board.save()

        serializer = LikesSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()

        response = Response({
            "message": "like success",
            "likes": board.like
        }, status=status.HTTP_200_OK)
        return response
